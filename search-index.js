var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,17,3,12,11,11,11,11,0,5,0,3,3,5,0,3,11,11,11,11,11,11,11,11,11,11,0,17,3,11,11,0,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,3,12,12,11,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["block","Block","BlockBody","new","new","from_block_body","id","timestamp","previous_block_hash","creator","txs","burnfee","difficulty","treasury","coinbase","block_hash","block_hash_hex","set_transactions","add_transaction","set_id","set_burnfee","set_previous_block_hash","set_difficulty","set_treasury","set_coinbase","burnfee","HEARTBEAT","BurnFee","start","new","return_work_needed","burn_fee_adjustment","adjust_work_needed","consensus","run","crypto","PublicKey","Signature","hash","keypair","Keypair","new","from_secret_slice","from_secret_hex","address","public_key","secret_key","make_message_from_string","sign_string_message","sign_message","verify_string_message","mempool","GENESIS_PERIOD","Mempool","new","work_available","slip","Slip","SlipBody","SlipBroadcastType","Normal","new","address","broadcast_type","amount","block_id","tx_id","slip_id","block_hash","set_block_id","set_tx_id","set_slip_id","set_block_hash","time","create_timestamp","transaction","Hop","address","signature","new","Transaction","TransactionBody","TransactionBroadcastType","Normal","new","timestamp","outputs","outputs_mut","inputs","inputs_mut","signature","broadcast_type","path","message","set_outputs","add_output","set_inputs","add_input","set_signature","set_path","add_hop_to_path","set_message","Error","Result","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","cmp","hash","as_c_ptr","as_mut_c_ptr","as_c_ptr","as_mut_c_ptr","from","from","from_str","from_str","eq","ne","eq","ne","fmt","fmt","fmt","clone","clone","partial_cmp","fmt","fmt","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","as_ptr","as_mut_ptr","from_secret_key","from_slice","serialize","serialize_uncompressed","negate_assign","add_exp_assign","mul_assign","combine","from_der","from_compact","from_der_lax","normalize_s","as_ptr","as_mut_ptr","serialize_der","serialize_compact"],"q":["saito_rust","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","saito_rust","saito_rust::burnfee","","","","","","","saito_rust","saito_rust::consensus","saito_rust","saito_rust::crypto","","","saito_rust","saito_rust::keypair","","","","","","","","","","","saito_rust","saito_rust::mempool","","","","saito_rust","saito_rust::slip","","","","","","","","","","","","","","","","saito_rust","saito_rust::time","saito_rust","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust","","saito_rust::block","","","","","","","","","","","","","","","","","","","","saito_rust::burnfee","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","saito_rust::keypair","","","","","","","","","saito_rust::mempool","","","","","","","","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","saito_rust::block","","saito_rust::burnfee","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::block","","","","saito_rust::burnfee","","saito_rust::keypair","","saito_rust::slip","","","","","saito_rust::transaction","","","","","","","saito_rust::block","","saito_rust::burnfee","saito_rust::keypair","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::keypair","saito_rust::crypto","","","","","","","","","","","","","","","","",""],"d":["","The <code>Block</code> holds all data inside the block body, and …","This <code>BlockBody</code> holds data to be serialized along with …","Creates a new <code>BlockBody</code>","Receives the a publickey and the previous block hash","Creates a block solely from the block body. Used when …","Returns the <code>Block</code> id","Returns the <code>Block</code> timestamp","Returns the previous <code>Block</code> hash","Returns the <code>Block</code> creator’s <code>secp256k1::PublicKey</code>","Returns the <code>Block</code>’s <code>Transaction</code>s","Returns the <code>Block</code> burnfee","Returns the <code>Block</code> difficulty","Returns the <code>Block</code> treasury","Returns the <code>Block</code> coinbase","Generate the block hash","Converts our blockhash from a byte array into a hex string","Sets the <code>Block</code>s list of <code>Transaction</code>s","Appends a transaction to the block","Sets the id of the block","Sets the <code>Block</code> burnfee","Sets the <code>Block</code> previous hash","Sets the <code>Block</code> difficulty","Sets the <code>Block</code> treasury","Sets the <code>Block</code> coinbase","","","The Burnfee object which contains our starting value and …","","Returns the BurnFee used to calculate the work needed to …","Returns the amount of work needed to produce a block …","Returns an adjusted burnfee based on the start value …","Adjusts the start value inside the <code>BurnFee</code> object based on…","","Run the Saito server","","A Secp256k1 public key, used for verification of …","An ECDSA signature","","","An secp256k1 keypair for signing and verifying messages","Create and return a keypair with a randomly generated …","Create and return a keypair with  the given hex u8 array …","Create and return a keypair with  the given hex u8 array …","Get the public key of the keypair in base58(i.e. address) …","Get the public key of the keypair as …","Get the private key as a hex-encoded string","Hash the message string with sha256 for signing by …","Hash and sign a message string","Hash and sign message bytes","Verify a message signed by secp256k1. Message is a plain …","","","The <code>Mempool</code> is the structure that collects blocks and …","Creates new <code>Memppol</code>","","","A record of owernship of funds on the network","An object that holds concrete data not subjective to …","An enumerated set of <code>Slip</code> types","","Create new <code>Slip</code> with default type …","Returns address in <code>Slip</code>","Returns<code>Slip</code> type from the enumerated set of …","Returns amount of Saito in <code>Slip</code>","Returns the <code>Block</code> id the slip originated from","Returns the <code>Transaction</code> id the slip originated from","Returns the <code>Slip</code>","Returns the <code>Block</code> hash the slip originated from","","","","","","","","A single record used in the history of transactions being …","An <code>secp256k1::PublicKey</code> of the router","An <code>secp256k1::Signature</code> proving routing work","Creates a new <code>Hop</code>","A record containging data of funds between transfered …","Core data to be serialized/deserialized of <code>Transaction</code>","Enumerated types of <code>Transaction</code>s to be handlded by …","","Creates new <code>Transaction</code>","Returns a timestamp when <code>Transaction</code> was created","Returns list of <code>Slip</code> outputs","Returns list of mutable <code>Slip</code> outputs","Returns list of <code>Slip</code> inputs","Returns list of <code>Slip</code> inputs","Returns <code>secp256k1::Signature</code> verifying the validity of …","Returns <code>TransactionBroadcastType</code> of the <code>Transaction</code>","Returns the list of <code>Hop</code>s serving as a routing history of …","Returns the message of the <code>Transaction</code>","Set the list of <code>Slip</code> outputs","Add a new <code>Slip</code> to the list of <code>Slip</code> outputs","Set the list of <code>Slip</code> inputs","Add a new <code>Slip</code> to the list of <code>Slip</code> inputs","Set the <code>secp256k1::Signature</code>","Set the list of <code>Hop</code>s","Add a new <code>Hop</code> to the list of <code>Hop</code>s","Set the message","Error returned by most functions.","A specialized <code>Result</code> type for operationsformats a Keypair for println!","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Creates a new public key from a secret key.","Creates a public key directly from a slice","Serialize the key as a byte-encoded pair of values. In …","Serialize the key as a byte-encoded pair of values, in …","Negates the pk to the pk <code>self</code> in place Will return an …","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","Adds a second key to this one, returning the sum. Returns …","Converts a DER-encoded byte slice to a signature","Converts a 64-byte compact-encoded byte slice to a …","Converts a “lax DER”-encoded byte slice to a …","Normalizes a signature to a “low S” form. In ECDSA, …","Obtains a raw pointer suitable for use with FFI functions","Obtains a raw mutable pointer suitable for use with FFI …","Serializes the signature in DER format","Serializes the signature in compact format"],"i":[0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,3,3,3,3,3,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,5,5,0,0,0,0,6,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,8,8,8,0,0,0,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,13,13,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,14,14,14,14,14,14,14,14,14,14,9,9,9,9,9,9,9,9,9,9,11,11,11,11,12,12,11,12,12,11,11,11,12,12,11,12,11,11,12,11,12,11,2,1,3,7,13,6,8,10,14,9,2,2,1,1,3,3,4,4,7,7,13,13,6,8,8,10,10,14,14,9,2,1,3,4,7,13,6,8,10,14,9,4,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"f":[null,null,null,[[["publickey",3]],["blockbody",3]],[[["publickey",3]],["block",3]],[[["blockbody",3]],["block",3]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["publickey",3]],[[],["vec",3]],[[],["u64",15]],[[],["f32",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["string",3]],[[["vec",3]]],[[["transaction",3]]],[[["u64",15]]],[[["u64",15]]],[[]],[[["f32",15]]],[[["u64",15]]],[[["u64",15]]],null,null,null,null,[[["f64",15]]],[[["u64",15]],["u64",15]],[[["u64",15]],["f64",15]],[[["u64",15]]],null,[[]],null,null,null,[[["vec",3]]],null,null,[[],["keypair",3]],[[],[["result",4],["error",4],["keypair",3]]],[[["str",15]],[["box",3],["keypair",3],["result",4]]],[[],["string",3]],[[],["publickey",3]],[[],["secretkey",3]],[[["str",15]]],[[["str",15]],[["result",4],["error",3],["string",3]]],[[],["signature",3]],[[["str",15]],["bool",15]],null,null,null,[[["keypair",3]]],[[],["u64",15]],null,null,null,null,null,[[["publickey",3],["slipbroadcasttype",4],["u64",15]],["slip",3]],[[],["publickey",3]],[[],["slipbroadcasttype",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],null,[[],["u64",15]],null,null,null,null,[[["signature",3],["publickey",3]],["hop",3]],null,null,null,null,[[["transactionbroadcasttype",4]],["transaction",3]],[[],["u64",15]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["signature",3]],[[],["transactionbroadcasttype",4]],[[],["vec",3]],[[],["vec",3]],[[["slip",3],["vec",3]]],[[["slip",3]]],[[["slip",3],["vec",3]]],[[["slip",3]]],[[["signature",3]]],[[["vec",3],["hop",3]]],[[["hop",3]]],[[["vec",3],["u8",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["publickey",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[["publickey",3]],["publickey",3]],[[["signature",3]],["signature",3]],[[["str",15]],[["result",4],["signature",3],["error",4]]],[[["str",15]],[["result",4],["error",4],["publickey",3]]],[[["publickey",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["publickey",3]],[[],["signature",3]],[[["publickey",3]],[["ordering",4],["option",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["block",3]],[[],["blockbody",3]],[[],["burnfee",3]],[[],["slip",3]],[[],["slipbody",3]],[[],["slipbroadcasttype",4]],[[],["hop",3]],[[],["transaction",3]],[[],["transactionbody",3]],[[],["transactionbroadcasttype",4]],[[["block",3]],["bool",15]],[[["block",3]],["bool",15]],[[["blockbody",3]],["bool",15]],[[["blockbody",3]],["bool",15]],[[["burnfee",3]],["bool",15]],[[["burnfee",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["slipbody",3]],["bool",15]],[[["slipbody",3]],["bool",15]],[[["slipbroadcasttype",4]],["bool",15]],[[["hop",3]],["bool",15]],[[["hop",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transactionbody",3]],["bool",15]],[[["transactionbody",3]],["bool",15]],[[["transactionbroadcasttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["result",4],["error",4],["publickey",3]]],[[]],[[]],[[["secp256k1",3]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["publickey",3]],[["result",4],["error",4],["publickey",3]]],[[],[["result",4],["signature",3],["error",4]]],[[],[["result",4],["signature",3],["error",4]]],[[],[["result",4],["signature",3],["error",4]]],[[]],[[]],[[]],[[],["serializedsignature",3]],[[]]],"p":[[3,"BlockBody"],[3,"Block"],[3,"BurnFee"],[3,"Keypair"],[3,"Mempool"],[4,"SlipBroadcastType"],[3,"Slip"],[3,"Hop"],[4,"TransactionBroadcastType"],[3,"Transaction"],[3,"PublicKey"],[3,"Signature"],[3,"SlipBody"],[3,"TransactionBody"]]}\
}');
initSearch(searchIndex);