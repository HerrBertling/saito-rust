var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[6,6,0,0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,3,3,7,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Result","block","blockchain","consensus","crypto","mempool","network","slip","time","transaction","Block","BlockCore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from","get_burnfee","get_creator","get_difficulty","get_hash","get_id","get_merkle_root","get_signature","get_timestamp","get_treasury","into","into","into","ne","ne","new","new","previous_block_hash","serialize","serialize","set_burnfee","set_creator","set_difficulty","set_hash","set_id","set_merkle_root","set_previous_block_hash","set_signature","set_timestamp","set_treasury","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Blockchain","add_block","borrow","borrow_mut","fmt","from","get_latest_block","into","new","try_from","try_into","type_id","vzip","MempoolNewBlock","MempoolNewTransaction","SaitoMessage","borrow","borrow_mut","clone","clone_into","fmt","from","into","run","to_owned","try_from","try_into","type_id","vzip","hash","transaction","Message","PublicKey","SECP256K1","SaitoHash","SaitoPublicKey","SaitoSignature","Signature","add_exp_assign","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","combine","combine_keys","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_compact","from_der","from_der_lax","from_secret_key","from_slice","from_slice","from_str","from_str","get_hash","hash","hash","index","index","index","index","index","into","into","into","is_empty","len","mul_assign","ne","ne","negate_assign","normalize_s","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize_compact","serialize_der","serialize_uncompressed","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Mempool","MempoolMessage","TryBundle","add_block","borrow","borrow","borrow_mut","borrow_mut","bundle_block","can_bundle_block","clone","clone_into","fmt","from","from","generate_block_from_mempool_transactions","into","into","new","run","take_block","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","run","Normal","Slip","SlipCore","SlipType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_amount","get_hash","get_publickey","get_slip_ordinal","get_slip_type","get_uuid","hash","into","into","into","ne","ne","new","new","serialize","serialize","serialize","serialize_for_signature","set_amount","set_publickey","set_slip_ordinal","set_slip_type","set_uuid","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","TracingAccumulator","TracingTimer","accumulate_time_since_start","borrow","borrow","borrow_mut","borrow_mut","create_timestamp","finish","format_timestamp","from","from","into","into","new","new","set_start","time_since_last","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Normal","Transaction","TransactionCore","TransactionType","add_input","add_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_inputs","get_message","get_outputs","get_signature","get_timestamp","get_transaction_type","into","into","into","ne","ne","new","new","serialize","serialize","serialize","set_message","set_signature","set_timestamp","set_transaction_type","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["saito_rust","","","","","","","","","","","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockchain","","","","","","","","","","","","","saito_rust::consensus","","","","","","","","","","","","","","","","saito_rust::consensus::SaitoMessage","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::mempool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::network","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::time","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error returned by most functions.","A specialized <code>Result</code> type for operations.","","","","","","","","","","","BlockCore is a self-contained object containing only the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The types of messages broadcast over the main broadcast …","","","","","","","","Run the Saito consensus runtime","","","","","","","","A (hashed) message input to an ECDSA signature","A Secp256k1 public key, used for verification of …","A global, static context to avoid repeatedly creating …","","","","An ECDSA signature","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","","","","","","","Converts the object to a mutable raw pointer for FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Converts the object to a raw pointer for FFI interfacing","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","Gets a reference to the underlying array","","","","","","","","","","","","","","","Adds a second key to this one, returning the sum. Returns …","Adds the keys in the provided slice together, returning …","","","","","","","","","","","","Converts a 32-byte hash directly to a message without …","","","","","","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","Creates a new public key from a secret key.","<strong>If you just want to sign an arbitrary message use …","Creates a public key directly from a slice","","","","","","","","","","","","","","Returns whether the object as an array is empty","Returns the length of the object as an array","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","","","Negates the pk to the pk <code>self</code> in place Will return an …","Normalizes a signature to a “low S” form. In ECDSA, …","","","","Serialize the key as a byte-encoded pair of values. In …","","Serializes the signature in compact format","Serializes the signature in DER format","Serialize the key as a byte-encoded pair of values, in …","","","","","","","","","","","","","","","","","","","The <code>Mempool</code> holds unprocessed blocks and transactions and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SlipCore is a self-contained object containing only the …","SlipType is a human-readable indicator of the slip-type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper for tracing. Get the amount of time passed. Only …","Accumulate the time passed since this method was called","","","","","","Get the total time accumulated","","","","","","Create a new TracingTimer","Create a new TracingAccumulator","","Gets the time passed since this method was called","","","","","","","","","","","TransactionCore is a self-contained object containing …","TransactionType is a human-readable indicator of the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,3,3,4,4,0,4,4,4,4,4,4,4,0,4,4,4,4,4,5,6,0,0,0,0,0,0,0,7,8,7,9,8,7,9,8,7,9,8,7,9,8,8,7,9,8,7,9,8,7,9,8,7,9,8,7,7,7,7,9,8,7,9,8,7,7,7,9,9,8,8,7,7,9,9,9,9,9,7,8,7,7,9,7,0,7,8,8,8,8,8,8,7,9,8,8,7,7,9,7,9,8,7,7,7,9,9,9,7,8,7,9,7,9,8,7,9,8,7,9,8,7,9,0,8,7,9,0,0,10,11,11,10,11,10,11,11,10,10,10,11,10,11,11,10,11,0,11,10,11,10,11,10,11,10,11,10,0,12,0,0,0,12,13,14,12,13,14,12,13,14,12,13,14,13,14,12,13,14,12,13,14,12,13,14,12,13,14,14,12,14,14,14,14,12,12,13,14,13,14,13,14,12,13,14,14,14,14,14,14,14,12,13,14,12,13,14,12,13,14,12,13,14,12,13,14,0,0,15,16,15,16,15,0,15,0,16,15,16,15,16,15,15,16,16,15,16,15,16,15,16,15,17,0,0,0,18,18,17,19,18,17,19,18,17,19,18,17,19,18,19,18,17,19,18,17,19,18,17,19,18,17,19,18,18,18,18,18,18,18,17,19,18,19,18,19,18,17,19,18,18,18,18,18,17,19,18,17,19,18,17,19,18,17,19,18,17,19,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["blockcore",3]],[[],["block",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["blockcore",3]],["bool",15]],[[["block",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15],["vec",3]]],[[]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u64",15]],[[],["saitohash",6]],[[],["u64",15]],[[],["saitohash",6]],[[],["saitosignature",6]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[],[["u8",15],["vec",3]]],[[["blockcore",3]],["bool",15]],[[["block",3]],["bool",15]],[[["u64",15]]],[[["blockcore",3]],["block",3]],[[],["saitohash",6]],[[],["result",4]],[[],["result",4]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u64",15]]],[[],["saitohash",6]],[[["u64",15]]],[[]],[[["saitohash",6]]],[[]],[[["u64",15]]],[[["u64",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[["block",3]]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[],[["option",4],["block",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[]],[[]],[[],["saitomessage",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["secp256k1",3]],[["result",4],["error",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["message",3]],[[],["publickey",3]],[[],["signature",3]],[[]],[[]],[[]],[[["message",3]],["ordering",4]],[[["publickey",3]],["ordering",4]],[[["publickey",3]],[["result",4],["publickey",3],["error",4]]],[[],[["result",4],["publickey",3],["error",4]]],[[],[["result",4],["publickey",3]]],[[],[["result",4],["signature",3]]],[[["message",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[],["message",3]],[[]],[[["publickey",3]],["publickey",3]],[[]],[[["signature",3]],["signature",3]],[[]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["message",3],["result",4],["error",4]]],[[],[["result",4],["publickey",3],["error",4]]],[[["str",15]],[["result",4],["publickey",3],["error",4]]],[[["str",15]],[["signature",3],["error",4],["result",4]]],[[],["u64",15]],[[["vec",3]],["saitohash",6]],[[]],[[["usize",15],["rangeto",3]]],[[["usize",15],["range",3]]],[[["rangefull",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["rangefrom",3]]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["secp256k1",3]]],[[]],[[["message",3]],[["option",4],["ordering",4]]],[[["publickey",3]],[["option",4],["ordering",4]]],[[],["result",4]],[[]],[[],["result",4]],[[]],[[],["serializedsignature",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["saitopublickey",6],["saitosignature",6]],["bool",15]],[[]],[[]],[[]],null,null,null,[[["block",3]]],[[]],[[]],[[]],[[]],[[["option",4],["block",3]],["block",3]],[[["option",4],["block",3]],["bool",15]],[[],["mempoolmessage",4]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["block",3]],["block",3]],[[]],[[]],[[]],[[["arc",3],["rwlock",3],["sender",3],["receiver",3],["arc",3],["saitomessage",4],["rwlock",3]]],[[["saitohash",6]],[["block",3],["option",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["sender",3],["saitomessage",4],["receiver",3]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["sliptype",4]],[[],["slipcore",3]],[[],["slip",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["sliptype",4]],["bool",15]],[[["slipcore",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u8",15]],[[],["sliptype",4]],[[],["saitosignature",6]],[[]],[[]],[[]],[[]],[[["slipcore",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["sliptype",4],["u64",15],["u8",15]]],[[["slipcore",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u8",15]]],[[["sliptype",4]]],[[["saitosignature",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]],[["strftimeitems",3],["delayedformat",3]]],[[]],[[]],[[]],[[]],[[],["tracingtimer",3]],[[],["tracingaccumulator",3]],[[]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[["slip",3]]],[[["slip",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transactiontype",4]],[[],["transactioncore",3]],[[],["transaction",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["transactiontype",4]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[]],[[],["u64",15]],[[],["transactiontype",4]],[[]],[[]],[[]],[[["transactioncore",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["u8",15],["vec",3],["transactiontype",4],["slip",3],["u64",15],["vec",3]]],[[["transactioncore",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]]],[[],["saitosignature",6]],[[["u64",15]]],[[["transactiontype",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]]],"p":[[3,"BlockCore"],[3,"Block"],[3,"Blockchain"],[4,"SaitoMessage"],[13,"MempoolNewBlock"],[13,"MempoolNewTransaction"],[3,"PublicKey"],[3,"Message"],[3,"Signature"],[4,"MempoolMessage"],[3,"Mempool"],[4,"SlipType"],[3,"SlipCore"],[3,"Slip"],[3,"TracingAccumulator"],[3,"TracingTimer"],[4,"TransactionType"],[3,"Transaction"],[3,"TransactionCore"]]},\
"spammer":{"doc":"","t":[5],"n":["main"],"q":["spammer"],"d":[""],"i":[0],"f":[[[],["result",6]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};