var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[0,17,3,12,11,11,11,0,3,11,11,11,11,11,11,11,11,11,11,0,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,3,12,11,3,3,12,12,12,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["burnfee","HEARTBEAT","BurnFee","start","new","return_work_needed","burn_fee_adjustment","keypair","Keypair","new","from_secret_slice","from_secret_hex","address","public_key","secret_key","make_message_from_string","sign_string_message","sign_message","verify_string_message","slip","Slip","SlipBody","SlipBroadcastType","Normal","new","address","broadcast_type","amount","block_id","tx_id","slip_id","block_hash","set_block_id","set_tx_id","set_slip_id","set_block_hash","time","create_timestamp","transaction","Hop","to","new","Transaction","TransactionBody","to","from","broadcast_type","msg","TransactionBroadcastType","Normal","new","timestamp","to_slips","from_slips","signature","broadcast_type","path","message","set_to_slips","add_to_slip","set_from_slips","add_from_slip","set_signature","set_path","add_hop_to_path","set_message","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt"],"q":["saito_rust","saito_rust::burnfee","","","","","","saito_rust","saito_rust::keypair","","","","","","","","","","","saito_rust","saito_rust::slip","","","","","","","","","","","","","","","","saito_rust","saito_rust::time","saito_rust","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::burnfee","","","","","","","","","saito_rust::keypair","","","","","","","","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::burnfee","saito_rust::slip","","","saito_rust::transaction","","saito_rust::burnfee","","saito_rust::keypair","","saito_rust::slip","","","","","saito_rust::transaction","","","","","","","saito_rust::burnfee","saito_rust::keypair","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::keypair"],"d":["","","The Burnfee object which contains our starting value and …","","Returns the BurnFee used to calculate the work needed to …","Returns the amount of work needed to produce a block …","Returns an adjusted burnfee based on the start value …","","An secp256k1 keypair for signing and verifying messages","Create and return a keypair with a randomly generated …","Create and return a keypair with  the given hex u8 array …","Create and return a keypair with  the given hex u8 array …","Get the public key of the keypair in base58(i.e. address) …","Get the public key of the keypair as …","Get the private key as a hex-encoded string","Hash the message string with sha256 for signing by …","Hash and sign a message string","Hash and sign message bytes","Verify a message signed by secp256k1. Message is a plain …","","A record of owernship of funds on the network","An object that holds concrete data not subjective to …","An enumerated set of <code>Slip</code> types","","Create new <code>Slip</code> with default type …","Returns address in <code>Slip</code>","Returns<code>Slip</code> type from the enumerated set of …","Returns amount of Saito in <code>Slip</code>","Returns the <code>Block</code> id the slip originated from","Returns the <code>Transaction</code> id the slip originated from","Returns the <code>Slip</code>","Returns the <code>Block</code> hash the slip originated from","","","","","","","","A single record used in the history of transactions being …","","Creates a new <code>Hop</code>","A record containging data of funds between transfered …","Core data to be serialized/deserialized of <code>Transaction</code>","","","","","Enumerated types of <code>Transaction</code>s to be handlded by …","","Creates new <code>Transaction</code>","Returns a timestamp when <code>Transaction</code> was created","Returns list of <code>Slip</code> outputs","Returns list of <code>Slip</code> inputs","Returns <code>secp256k1::Signature</code> verifying the validity of …","Returns <code>TransactionBroadcastType</code> of the <code>Transaction</code>","Returns the list of <code>Hop</code>s serving as a routing history of …","Returns the message of the <code>Transaction</code>","Set the list of <code>Slip</code> outputs","Add a new <code>Slip</code> to the list of <code>Slip</code> outputs","Set the list of <code>Slip</code> inputs","Add a new <code>Slip</code> to the list of <code>Slip</code> inputs","Set the <code>secp256k1::Signature</code>","Set the list of <code>Hop</code>s","Add a new <code>Hop</code> to the list of <code>Hop</code>s","Set the message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","formats a Keypair for println!"],"i":[0,0,0,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,5,5,0,0,6,6,6,6,0,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,9,9,9,9,9,9,9,9,9,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,1,4,9,3,5,7,1,1,2,2,4,4,9,9,3,5,5,8,8,6,6,7,1,2,4,9,3,5,8,6,7,2],"f":[null,null,null,null,[[["f64",15]]],[[["u64",15]],["u64",15]],[[["u64",15]],["f64",15]],null,null,[[],["keypair",3]],[[],[["keypair",3],["error",4],["result",4]]],[[["str",15]],[["box",3],["keypair",3],["result",4]]],[[],["string",3]],[[],["publickey",3]],[[],["secretkey",3]],[[["str",15]]],[[["str",15]],[["result",4],["error",3],["string",3]]],[[],["signature",3]],[[["str",15]],["bool",15]],null,null,null,null,null,[[["u64",15],["slipbroadcasttype",4],["publickey",3]],["slip",3]],[[],["publickey",3]],[[],["slipbroadcasttype",4]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],null,[[],["u64",15]],null,null,null,[[["signature",3],["publickey",3]],["hop",3]],null,null,null,null,null,null,null,null,[[["transactionbroadcasttype",4]],["transaction",3]],[[],["u64",15]],[[],[["vec",3],["slip",3]]],[[],[["vec",3],["slip",3]]],[[],["signature",3]],[[],["transactionbroadcasttype",4]],[[],[["hop",3],["vec",3]]],[[],[["vec",3],["u8",15]]],[[["vec",3],["slip",3]]],[[["slip",3]]],[[["vec",3],["slip",3]]],[[["slip",3]]],[[["signature",3]]],[[["hop",3],["vec",3]]],[[["hop",3]]],[[["vec",3],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["burnfee",3]],[[],["slip",3]],[[],["slipbody",3]],[[],["slipbroadcasttype",4]],[[],["hop",3]],[[],["transactionbroadcasttype",4]],[[["burnfee",3]],["bool",15]],[[["burnfee",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["slipbody",3]],["bool",15]],[[["slipbody",3]],["bool",15]],[[["slipbroadcasttype",4]],["bool",15]],[[["hop",3]],["bool",15]],[[["hop",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transactionbody",3]],["bool",15]],[[["transactionbody",3]],["bool",15]],[[["transactionbroadcasttype",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"BurnFee"],[3,"Keypair"],[4,"SlipBroadcastType"],[3,"Slip"],[3,"Hop"],[3,"TransactionBody"],[4,"TransactionBroadcastType"],[3,"Transaction"],[3,"SlipBody"]]}\
}');
initSearch(searchIndex);