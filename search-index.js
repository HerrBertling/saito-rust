var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,0,3,11,11,0,17,3,12,11,11,11,11,0,5,0,3,3,5,0,3,11,5,5,0,3,11,11,11,11,11,11,11,11,11,11,0,17,3,0,3,11,11,11,11,0,4,13,3,3,11,11,11,11,11,11,11,11,0,17,3,11,11,11,0,5,5,0,3,12,12,11,4,13,3,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,12,13,12,13,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["block","Block","new_mock","new","difficulty","burnfee","core","clone_hash","creator","coinbase","transactions","previous_block_hash","id","hash","hash_as_hex","BlockCore","new_mock","new","blockchain","Blockchain","new","add_block","burnfee","HEARTBEAT","BurnFee","start","new","return_work_needed","burn_fee_adjustment","adjust_work_needed","consensus","run","crypto","PublicKey","Signature","hash","golden_ticket","GoldenTicket","new","generate_golden_ticket_transaction","generate_random_data","keypair","Keypair","new","from_secret_slice","from_secret_hex","address","public_key","secret_key","make_message_from_string","sign_string_message","sign_message","verify_string_message","mempool","GENESIS_PERIOD","Mempool","shashmap","Shashmap","new","spend_transaction","unspend_transaction","slip_block_id","slip","SlipBroadcastType","Normal","SlipID","OutputSlip","new","block_id","tx_id","slip_id","new","address","broadcast_type","amount","storage","BLOCKS_DIR","Storage","new","write_block_to_disk","read_block_from_disk","time","create_timestamp","format_timestamp","transaction","Hop","address","signature","new","TransactionType","Normal","Transaction","core","TransactionCore","new_mock","new","sign","add_signature","signature","add_hop_to_path","timestamp","outputs","outputs_mut","add_output","inputs","inputs_mut","add_input","broadcast_type","message","types","SaitoMessage","Transaction","payload","Block","payload","TryBundle","Error","Result","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","deserialize","deserialize","hash","cmp","fmt","fmt","fmt","fmt","serialize","serialize","as_c_ptr","as_mut_c_ptr","as_c_ptr","as_mut_c_ptr","from","from","eq","ne","eq","ne","from_str","from_str","fmt","clone","clone","partial_cmp","from","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","as_ptr","as_mut_ptr","from_secret_key","from_slice","serialize","serialize_uncompressed","negate_assign","add_exp_assign","mul_assign","combine","from_der","from_compact","from_der_lax","normalize_s","as_ptr","as_mut_ptr","serialize_der","serialize_compact"],"q":["saito_rust","saito_rust::block","","","","","","","","","","","","","","","","","saito_rust","saito_rust::blockchain","","","saito_rust","saito_rust::burnfee","","","","","","","saito_rust","saito_rust::consensus","saito_rust","saito_rust::crypto","","","saito_rust","saito_rust::golden_ticket","","","","saito_rust","saito_rust::keypair","","","","","","","","","","","saito_rust","saito_rust::mempool","","saito_rust","saito_rust::shashmap","","","","","saito_rust","saito_rust::slip","","","","","","","","","","","","saito_rust","saito_rust::storage","","","","","saito_rust","saito_rust::time","","saito_rust","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","saito_rust","saito_rust::types","","saito_rust::types::SaitoMessage","saito_rust::types","saito_rust::types::SaitoMessage","saito_rust::types","saito_rust","","saito_rust::block","","","","","","","","","","","","","","","","","","","","saito_rust::blockchain","","","","","","","","","","saito_rust::burnfee","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","saito_rust::golden_ticket","","","","","","","","","","saito_rust::keypair","","","","","","","","","saito_rust::mempool","","","","","","","","saito_rust::shashmap","","","","","","","","","","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::storage","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::types","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::block","","","","saito_rust::blockchain","saito_rust::burnfee","saito_rust::golden_ticket","saito_rust::shashmap","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::types","saito_rust::block","","","","saito_rust::burnfee","","saito_rust::keypair","","saito_rust::slip","","","","","saito_rust::transaction","","","","","","","saito_rust::block","","saito_rust::blockchain","saito_rust::burnfee","saito_rust::golden_ticket","saito_rust::keypair","saito_rust::shashmap","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::types","saito_rust::keypair","saito_rust::slip","","","saito_rust::block","","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::block","","saito_rust::slip","","","saito_rust::transaction","","","","saito_rust::crypto","","","","","","","","","","","","","","","","",""],"d":["","The <code>Block</code> holds all data inside the block body, and …","","","Returns the <code>Block</code> difficulty","Returns the <code>Block</code> burnfee","Returns the <code>BlockCore</code> of <code>Block</code>","Returns the <code>Block</code> hash","Returns the <code>Block</code> creator’s <code>secp256k1::PublicKey</code>","Returns the <code>Block</code> coinbase","Returns the <code>Block</code>’s <code>Transaction</code>s","Returns the previous <code>Block</code> hash","Returns the <code>Block</code> id","Returns the <code>hash</code>","Converts our blockhash from a byte array into a hex string","The <code>BlockCore</code> holds the most important metadata …","Creates a new mock <code>BlockCore</code> for use as we develop code. …","Creates a new <code>BlockCore</code>","","The structure represents the state of the blockchain …","Create new <code>Blockchain</code>","Append <code>Block</code> to the index of <code>Blockchain</code>","","","The Burnfee object which contains our starting value and …","","Returns the BurnFee used to calculate the work needed to …","Returns the amount of work needed to produce a block …","Returns an adjusted burnfee based on the start value …","Adjusts the start value inside the <code>BurnFee</code> object based on…","","Run the Saito consensus runtime","","A Secp256k1 public key, used for verification of …","An ECDSA signature","","","The golden ticket is a data structure containing …","Create new <code>GoldenTicket</code>","Create a new <code>GoldenTicket</code> <code>Transaction</code>","Generate random data, used for generating solutions in …","","An secp256k1 keypair for signing and verifying messages","Create and return a keypair with a randomly generated …","Create and return a keypair with  the given hex u8 array …","Create and return a keypair with  the given hex u8 array …","Get the public key of the keypair in base58(i.e. address) …","Get the public key of the keypair as …","Get the private key as a hex-encoded string","Hash the message string with sha256 for signing by …","Hash and sign a message string","Hash and sign message bytes","Verify a message signed by secp256k1. Message is a plain …","","","The <code>Mempool</code> is the structure that collects blocks and …","","A hashmap storing Slips TODO fix this documentation once …","Create new <code>Shashmap</code>","Insert the inputs of a <code>Transaction</code> with the <code>Block</code> id","Remove the inputs of a <code>Transaction</code> with the <code>Block</code> id","Return the <code>Block</code> id based on <code>OutputSlip</code>","","An enumerated set of <code>Slip</code> types","","A record of owernship of funds on the network","An object that holds concrete data not subjective to …","Create new <code>SlipID</code>","Returns the <code>Block</code> id the slip originated from","Returns the <code>Transaction</code> id the slip originated from","Returns the <code>Slip</code>","Create new <code>OutputSlip</code>","Returns address in <code>Slip</code>","Returns<code>Slip</code> type from the enumerated set of …","Returns amount of Saito in <code>Slip</code>","","","","","","","","","","","A single record used in the history of transactions being …","An <code>secp256k1::PublicKey</code> of the router","An <code>secp256k1::Signature</code> proving routing work","Creates a new <code>Hop</code>","Enumerated types of <code>Transaction</code>s to be handlded by …","","A record containging data of funds between transfered …","All data which is serialized and signed","Core data to be serialized/deserialized of <code>Transaction</code>","","Creates new <code>Transaction</code>","","","Returns <code>secp256k1::Signature</code> verifying the validity of …","Add a new <code>Hop</code> to the list of <code>Hop</code>s","Returns a timestamp when <code>Transaction</code> was created","Returns list of <code>OutputSlip</code> outputs","Returns list of mutable <code>OutputSlip</code> outputs","Add a new <code>OutputSlip</code> to the list of <code>Slip</code> outputs","Returns list of <code>SlipID</code> inputs","Returns list of <code>SlipID</code> inputs","Add a new <code>SlipID</code> to the list of <code>SlipID</code> inputs","Returns <code>TransactionType</code> of the <code>Transaction</code>","Returns the message of the <code>Transaction</code>","","","","","","","","Error returned by most functions.","A specialized <code>Result</code> type for operationsformats a Keypair for println!","","","","","","","","","","","","","","","","","","","","","","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Creates a new public key from a secret key.","Creates a public key directly from a slice","Serialize the key as a byte-encoded pair of values. In …","Serialize the key as a byte-encoded pair of values, in …","Negates the pk to the pk <code>self</code> in place Will return an …","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","Adds a second key to this one, returning the sum. Returns …","Converts a DER-encoded byte slice to a signature","Converts a 64-byte compact-encoded byte slice to a …","Converts a “lax DER”-encoded byte slice to a …","Normalizes a signature to a “low S” form. In ECDSA, …","Obtains a raw pointer suitable for use with FFI functions","Obtains a raw mutable pointer suitable for use with FFI …","Serializes the signature in DER format","Serializes the signature in compact format"],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,0,0,3,3,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,5,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,7,7,7,7,0,0,8,0,0,9,9,9,9,10,10,10,10,0,0,0,11,11,11,0,0,0,0,0,12,12,12,0,13,0,14,0,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,0,0,16,17,16,18,16,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,21,21,21,21,21,21,21,21,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,19,20,19,19,20,19,20,19,19,20,20,20,19,19,19,20,19,19,20,20,19,20,19,20,19,19,1,1,1,2,3,4,5,7,8,9,10,12,13,14,15,16,1,1,2,2,4,4,6,6,8,9,9,10,10,12,12,13,14,14,15,15,1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,6,8,9,10,1,2,8,9,10,12,13,14,15,1,2,8,9,10,12,13,14,15,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20],"f":[null,null,[[]],[[["blockcore",3],["f32",15],["u64",15]],["block",3]],[[],["f32",15]],[[],["u64",15]],[[],["blockcore",3]],[[]],[[],["publickey",3]],[[],["u64",15]],[[],["vec",3]],[[]],[[],["u64",15]],[[]],[[],["string",3]],null,[[]],[[["vec",3],["u64",15],["transaction",3],["publickey",3]]],null,null,[[]],[[["block",3]]],null,null,null,null,[[["f64",15]]],[[["u64",15]],["u64",15]],[[["u64",15]],["f64",15]],[[["u64",15]]],null,[[]],null,null,null,[[["vec",3]]],null,null,[[["publickey",3]]],[[["block",3],["keypair",3]],["transaction",3]],[[],[["vec",3],["u8",15]]],null,null,[[],["keypair",3]],[[],[["result",4],["error",4],["keypair",3]]],[[["str",15]],[["box",3],["result",4],["keypair",3]]],[[],["string",3]],[[],["publickey",3]],[[],["secretkey",3]],[[["str",15]]],[[["str",15]],[["result",4],["string",3],["error",3]]],[[],["signature",3]],[[["str",15]],["bool",15]],null,null,null,null,null,[[]],[[["transaction",3],["u64",15]]],[[["transaction",3]]],[[["slipid",3]],[["outputslip",3],["option",4]]],null,null,null,null,null,[[["u64",15]],["slipid",3]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15],["slipbroadcasttype",4],["publickey",3]],["outputslip",3]],[[],["publickey",3]],[[],["slipbroadcasttype",4]],[[],["u64",15]],null,null,null,[[["option",4],["string",3]]],[[["block",3]]],[[]],null,[[],["u64",15]],[[["u64",15]],[["delayedformat",3],["strftimeitems",3]]],null,null,null,null,[[["signature",3],["publickey",3]],["hop",3]],null,null,null,null,null,[[],["transaction",3]],[[["vec",3],["u64",15],["vec",3],["vec",3],["u8",15],["vec",3],["signature",3],["transactiontype",4],["outputslip",3],["slipid",3],["hop",3]],["transaction",3]],[[["transactioncore",3]],["transaction",3]],[[["transactioncore",3],["signature",3]],["transaction",3]],[[],["signature",3]],[[["hop",3]]],[[],["u64",15]],[[],["vec",3]],[[],["vec",3]],[[["outputslip",3]]],[[],["vec",3]],[[],["vec",3]],[[["slipid",3]]],[[],["transactiontype",4]],[[],["vec",3]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],[["publickey",3],["result",4]]],[[],[["result",4],["signature",3]]],[[]],[[["publickey",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[["publickey",3]],["publickey",3]],[[["signature",3]],["signature",3]],[[["publickey",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["str",15]],[["result",4],["publickey",3],["error",4]]],[[["str",15]],[["signature",3],["error",4],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["signature",3]],[[],["publickey",3]],[[["publickey",3]],[["ordering",4],["option",4]]],[[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],["block",3]],[[],["blockcore",3]],[[],["blockchain",3]],[[],["burnfee",3]],[[],["goldenticket",3]],[[],["shashmap",3]],[[],["slipbroadcasttype",4]],[[],["slipid",3]],[[],["outputslip",3]],[[],["hop",3]],[[],["transactiontype",4]],[[],["transaction",3]],[[],["transactioncore",3]],[[],["saitomessage",4]],[[["block",3]],["bool",15]],[[["block",3]],["bool",15]],[[["blockcore",3]],["bool",15]],[[["blockcore",3]],["bool",15]],[[["burnfee",3]],["bool",15]],[[["burnfee",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["keypair",3]],["bool",15]],[[["slipbroadcasttype",4]],["bool",15]],[[["slipid",3]],["bool",15]],[[["slipid",3]],["bool",15]],[[["outputslip",3]],["bool",15]],[[["outputslip",3]],["bool",15]],[[["hop",3]],["bool",15]],[[["hop",3]],["bool",15]],[[["transactiontype",4]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["result",4],["publickey",3],["error",4]]],[[]],[[]],[[["secp256k1",3]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["publickey",3]],[["result",4],["publickey",3],["error",4]]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[]],[[]],[[]],[[],["serializedsignature",3]],[[]]],"p":[[3,"Block"],[3,"BlockCore"],[3,"Blockchain"],[3,"BurnFee"],[3,"GoldenTicket"],[3,"Keypair"],[3,"Shashmap"],[4,"SlipBroadcastType"],[3,"SlipID"],[3,"OutputSlip"],[3,"Storage"],[3,"Hop"],[4,"TransactionType"],[3,"Transaction"],[3,"TransactionCore"],[4,"SaitoMessage"],[13,"Transaction"],[13,"Block"],[3,"PublicKey"],[3,"Signature"],[3,"Mempool"]]}\
}');
initSearch(searchIndex);