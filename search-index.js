var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[0,3,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,0,3,3,3,7,6,6,6,5,5,0,4,13,13,12,13,5,0,4,13,13,3,11,11,11,11,11,11,11,11,5,0,5,0,4,13,3,11,3,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,3,11,11,3,11,11,11,11,0,4,13,3,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["block","BlockCore","new","Block","new","get_hash","get_id","get_timestamp","previous_block_hash","get_creator","get_merkle_root","get_signature","get_treasury","get_burnfee","get_difficulty","set_id","set_timestamp","set_previous_block_hash","set_creator","set_merkle_root","set_signature","set_treasury","set_burnfee","set_difficulty","set_hash","blockchain","Blockchain","new","add_block","get_latest_block_id","get_latest_block_hash","crypto","Message","PublicKey","Signature","SECP256K1","SaitoHash","SaitoPublicKey","SaitoSignature","hash","verify","consensus","SaitoMessage","TestMessage","MempoolNewBlock","hash","MempoolNewTransaction","run","mempool","MempoolMessage","TestMessage","TryBundle","Mempool","new","add_block","get_block","bundle_block","can_bundle_block","generate_block_from_mempool_transactions","set_broadcast_channel_sender","set_mempool_channel_sender","run","network","run","slip","SlipType","Normal","SlipCore","new","Slip","new","get_publickey","get_amount","get_uuid","get_slip_ordinal","get_slip_type","set_publickey","set_amount","set_uuid","set_slip_ordinal","set_slip_type","serialize_for_signature","time","create_timestamp","format_timestamp","TracingTimer","new","time_since_last","TracingAccumulator","new","set_start","accumulate_time_since_start","finish","transaction","TransactionType","Normal","TransactionCore","new","Transaction","new","add_input","add_output","get_timestamp","get_transaction_type","get_inputs","get_outputs","get_message","get_signature","set_timestamp","set_transaction_type","set_message","set_signature","Error","Result","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","equivalent","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","get_hash","vzip","init","deref","deref_mut","drop","equivalent","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","equivalent","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","get_hash","vzip","init","deref","deref_mut","drop","equivalent","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","init","deref","deref_mut","drop","deserialize","deserialize","hash","cmp","cmp","fmt","fmt","fmt","fmt","fmt","serialize","serialize","as_ref","as_c_ptr","as_mut_c_ptr","as_c_ptr","as_mut_c_ptr","as_c_ptr","as_mut_c_ptr","from","from","from","eq","eq","ne","eq","ne","index","index","index","index","index","from_str","from_str","fmt","clone","clone","clone","partial_cmp","partial_cmp","from","into","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","from_slice","as_ptr","as_mut_ptr","len","is_empty","as_ptr","as_mut_ptr","from_secret_key","from_slice","serialize","serialize_uncompressed","negate_assign","add_exp_assign","mul_assign","combine","combine_keys","from_der","from_compact","from_der_lax","normalize_s","as_ptr","as_mut_ptr","serialize_der","serialize_compact"],"q":["saito_rust","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","saito_rust","saito_rust::blockchain","","","","","saito_rust","saito_rust::crypto","","","","","","","","","saito_rust","saito_rust::consensus","","","saito_rust::consensus::SaitoMessage","saito_rust::consensus","","saito_rust","saito_rust::mempool","","","","","","","","","","","","","saito_rust","saito_rust::network","saito_rust","saito_rust::slip","","","","","","","","","","","","","","","","","saito_rust","saito_rust::time","","","","","","","","","","saito_rust","saito_rust::transaction","","","","","","","","","","","","","","","","","","saito_rust","","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockchain","","","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::consensus","","","","","","","","","","","","","","saito_rust::mempool","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::time","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::block","","","","saito_rust::consensus","saito_rust::mempool","saito_rust::slip","","","saito_rust::transaction","","","saito_rust::block","","","","saito_rust::slip","","","","","saito_rust::transaction","","","","","saito_rust::block","","saito_rust::blockchain","saito_rust::consensus","saito_rust::mempool","saito_rust::slip","","","saito_rust::transaction","","","saito_rust::slip","saito_rust::block","","saito_rust::slip","","","saito_rust::transaction","","","saito_rust::block","","saito_rust::slip","","","saito_rust::transaction","","","saito_rust::crypto","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A (hashed) message input to an ECDSA signature","A Secp256k1 public key, used for verification of …","An ECDSA signature","A global, static context to avoid repeatedly creating …","","","","","","","The types of messages broadcast over the main broadcast …","","","","","Run the Saito consensus runtime","","","","","The <code>Mempool</code> holds unprocessed blocks and transactions and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper for tracing. Get the amount of time passed. Only …","Create a new TracingTimer","Gets the time passed since this method was called","","Create a new TracingAccumulator","","Accumulate the time passed since this method was called","Get the total time accumulated","","","","","","","","","","","","","","","","","","","","Error returned by most functions.","A specialized <code>Result</code> type for operationsets a reference to the underlying array","","","","","","","Converts a 32-byte hash directly to a message without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<strong>If you just want to sign an arbitrary message use …","Converts the object to a raw pointer for FFI interfacing","Converts the object to a mutable raw pointer for FFI …","Returns the length of the object as an array","Returns whether the object as an array is empty","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Creates a new public key from a secret key.","Creates a public key directly from a slice","Serialize the key as a byte-encoded pair of values. In …","Serialize the key as a byte-encoded pair of values, in …","Negates the pk to the pk <code>self</code> in place Will return an …","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","Adds a second key to this one, returning the sum. Returns …","Adds the keys in the provided slice together, returning …","Converts a DER-encoded byte slice to a signature","Converts a 64-byte compact-encoded byte slice to a …","Converts a “lax DER”-encoded byte slice to a …","Normalizes a signature to a “low S” form. In ECDSA, …","Obtains a raw pointer suitable for use with FFI functions","Obtains a raw mutable pointer suitable for use with FFI …","Serializes the signature in DER format","Serializes the signature in compact format"],"i":[0,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,4,4,5,4,0,0,0,6,6,0,7,7,7,7,7,7,7,7,0,0,0,0,0,8,0,9,0,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,11,11,0,12,12,12,12,0,0,13,0,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,4,4,4,4,4,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,18,17,17,16,17,18,18,17,16,17,18,16,17,17,18,18,16,16,16,18,17,16,17,17,18,18,16,16,16,16,16,17,18,17,18,16,17,16,17,2,2,1,2,4,6,8,9,10,13,14,15,1,1,2,2,8,9,9,10,10,13,14,14,15,15,1,2,3,4,6,8,9,10,13,14,15,8,1,2,8,9,10,13,14,15,1,2,8,9,10,13,14,15,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18],"f":[null,null,[[],["blockcore",3]],null,[[],["block",3]],[[],["saitohash",6]],[[],["u64",15]],[[],["u64",15]],[[],["saitohash",6]],[[],["saitopublickey",6]],[[],["saitohash",6]],[[],["saitosignature",6]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[["u64",15]]],[[["u64",15]]],[[["saitohash",6]]],[[["saitopublickey",6]]],[[]],[[]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[],["saitohash",6]],null,null,[[]],[[["block",3]]],[[],["u64",15]],[[],["saitohash",6]],null,null,null,null,null,null,null,null,[[["vec",3]],["saitohash",6]],[[["saitopublickey",6],["saitosignature",6]],["bool",15]],null,null,null,null,null,null,[[]],null,null,null,null,null,[[]],[[["block",3]],["bool",15]],[[["saitohash",6]],[["option",4],["block",3]]],[[["rwlock",3],["arc",3]]],[[["rwlock",3],["arc",3]],["bool",15]],[[["saitohash",6],["u64",15]],["block",3]],[[["sender",3],["saitomessage",4]]],[[["sender",3],["mempoolmessage",4]]],[[["arc",3],["rwlock",3],["saitomessage",4],["arc",3],["rwlock",3],["sender",3],["receiver",3]]],null,[[["sender",3],["saitomessage",4],["receiver",3]]],null,null,null,null,[[],["slipcore",3]],null,[[]],[[],["saitopublickey",6]],[[],["u64",15]],[[],["saitosignature",6]],[[],["u8",15]],[[],["sliptype",4]],[[["saitopublickey",6]]],[[["u64",15]]],[[["saitosignature",6]]],[[["u8",15]]],[[["sliptype",4]]],[[],[["vec",3],["u8",15]]],null,[[],["u64",15]],[[["u64",15]],[["delayedformat",3],["strftimeitems",3]]],null,[[],["tracingtimer",3]],[[],["u64",15]],null,[[],["tracingaccumulator",3]],[[]],[[]],[[],["u64",15]],null,null,null,null,[[],["transactioncore",3]],null,[[],["transaction",3]],[[["slip",3]]],[[["slip",3]]],[[],["u64",15]],[[],["transactiontype",4]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[]],[[["u64",15]]],[[["transactiontype",4]]],[[["vec",3],["u8",15]]],[[],["saitosignature",6]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["u64",15]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["publickey",3],["result",4]]],[[],[["signature",3],["result",4]]],[[]],[[["publickey",3]],["ordering",4]],[[["message",3]],["ordering",4]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["message",3]],[[["signature",3]],["signature",3]],[[["publickey",3]],["publickey",3]],[[["message",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["usize",15],["rangeto",3]]],[[["usize",15]],["u8",15]],[[["range",3],["usize",15]]],[[["rangefull",3]]],[[["usize",15],["rangefrom",3]]],[[["str",15]],[["publickey",3],["error",4],["result",4]]],[[["str",15]],[["signature",3],["error",4],["result",4]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["signature",3]],[[],["message",3]],[[],["publickey",3]],[[["message",3]],[["ordering",4],["option",4]]],[[["publickey",3]],[["ordering",4],["option",4]]],[[["vec",3],["u8",15]]],[[],[["vec",3],["u8",15]]],[[],["blockcore",3]],[[],["block",3]],[[],["saitomessage",4]],[[],["mempoolmessage",4]],[[],["sliptype",4]],[[],["slipcore",3]],[[],["slip",3]],[[],["transactiontype",4]],[[],["transactioncore",3]],[[],["transaction",3]],[[["blockcore",3]],["bool",15]],[[["blockcore",3]],["bool",15]],[[["block",3]],["bool",15]],[[["block",3]],["bool",15]],[[["sliptype",4]],["bool",15]],[[["slipcore",3]],["bool",15]],[[["slipcore",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["transactiontype",4]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["error",4],["result",4],["message",3]]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[]],[[]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["publickey",3],["error",4],["result",4]]],[[]],[[]],[[["secp256k1",3]]],[[["secp256k1",3]],[["error",4],["result",4]]],[[["secp256k1",3]],[["error",4],["result",4]]],[[["publickey",3]],[["publickey",3],["error",4],["result",4]]],[[],[["publickey",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[],[["signature",3],["error",4],["result",4]]],[[]],[[]],[[]],[[],["serializedsignature",3]],[[]]],"p":[[3,"BlockCore"],[3,"Block"],[3,"Blockchain"],[4,"SaitoMessage"],[13,"MempoolNewBlock"],[4,"MempoolMessage"],[3,"Mempool"],[4,"SlipType"],[3,"SlipCore"],[3,"Slip"],[3,"TracingTimer"],[3,"TracingAccumulator"],[4,"TransactionType"],[3,"TransactionCore"],[3,"Transaction"],[3,"Message"],[3,"PublicKey"],[3,"Signature"]]},\
"spammer":{"doc":"","t":[5],"n":["main"],"q":["spammer"],"d":[""],"i":[0],"f":[[[],["result",6]]],"p":[]}\
}');
initSearch(searchIndex);