var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","t":[6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,3,6,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11,11,12,11,3,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,12,12,12,3,3,17,3,7,7,6,6,6,6,6,3,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,4,13,13,13,13,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,5,13,13,13,13,13,13,13,17,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,17,3,4,13,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Result","block","blockchain","blockring","burnfee","consensus","crypto","golden_ticket","hop","mempool","merkle","miner","network","slip","storage","test_utilities","time","transaction","wallet","Block","DataToValidate","add_transaction","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize_for_net","drop","drop","eq","eq","expected_difficulty","fee_transaction","fmt","fmt","from","from","from","ft_idx","ft_num","generate","generate_data_to_validate","generate_hash","generate_merkle_root","generate_metadata","get_burnfee","get_creator","get_difficulty","get_has_fee_transaction","get_has_golden_ticket","get_hash","get_id","get_lc","get_merkle_root","get_previous_block_hash","get_signature","get_timestamp","get_transactions","get_treasury","gt_idx","gt_num","has_fee_transaction","has_golden_ticket","init","init","into","into","into","ne","ne","new","new","on_chain_reorganization","rebroadcast_hash","rebroadcast_hash","rebroadcasts","serialize","serialize_for_net","serialize_for_signature","set_burnfee","set_creator","set_difficulty","set_has_fee_transaction","set_has_golden_ticket","set_hash","set_id","set_lc","set_merkle_root","set_previous_block_hash","set_signature","set_timestamp","set_transactions","set_treasury","sign","to_owned","to_owned","total_rebroadcast_fees_nolan","total_rebroadcast_nolan","total_rebroadcast_nolan","total_rebroadcast_slips","total_rebroadcast_slips","transactions","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","Blockchain","UtxoSet","add_block","add_block_failure","add_block_success","bit_pack","bit_unpack","blockring","blocks","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","get_latest_block","get_latest_block_hash","get_latest_block_id","init","into","is_new_chain_the_longest_chain","new","run","set_broadcast_channel_sender","try_from","try_into","type_id","unwind_chain","utxoset","validate","vzip","wallet_lock","wind_chain","BlockRing","EPOCH_LENGTH","RING_BUFFER_LENGTH","RingItem","add_block","add_block","borrow","borrow","borrow_mut","borrow_mut","contains_block_hash","contains_block_hash_at_block_id","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_longest_chain_block_hash","get_longest_chain_block_hash_by_block_id","get_longest_chain_block_id","init","init","into","into","new","new","on_chain_reorganization","on_chain_reorganization","print_lc","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BurnFee","HEARTBEAT","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","return_burnfee_for_block_produced_at_current_timestamp_in_nolan","return_routing_work_needed_to_produce_block_in_nolan","try_from","try_into","type_id","vzip","BlockchainAddBlockFailure","BlockchainAddBlockSuccess","BlockchainNewLongestChainBlock","MempoolNewBlock","MempoolNewTransaction","MinerNewGoldenTicket","SaitoMessage","TestMessage","TestMessage2","TestMessage3","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","run","to_owned","try_from","try_into","type_id","vzip","difficulty","hash","hash","hash","hash","ticket","transaction","MerkleTree","Message","PARALLEL_HASH_BYTE_THRESHOLD","PublicKey","SECP256K1","SHA256","SaitoHash","SaitoPrivateKey","SaitoPublicKey","SaitoSignature","SaitoUTXOSetKey","SecretKey","Signature","add_assign","add_exp_assign","algorithm","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","combine","combine_keys","count","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_compact","from_der","from_der_lax","from_secret_key","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_vec","gen_nth_proof","gen_proof","generate_keys","generate_random_bytes","get_hash","get_hash","hash","hash","hash","height","index","index","index","index","index","index","index","index","index","index","init","init","init","init","init","into","into","into","into","into","into_iter","is_empty","is_empty","is_empty","iter","len","len","mul_assign","mul_assign","ne","ne","negate_assign","negate_assign","new","normalize_s","partial_cmp","partial_cmp","partial_cmp","partial_cmp","root_hash","serialize","serialize","serialize","serialize","serialize_compact","serialize_der","serialize_uncompressed","sign","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","GoldenTicket","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize_for_transaction","drop","fmt","from","generate_solution","get_publickey","get_random","get_target","get_vote","init","into","is_valid_solution","new","serialize","serialize_for_transaction","to_owned","try_from","try_into","type_id","vzip","HOP_SIZE","Hop","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize_from_net","drop","eq","fmt","from","generate_hop","get_from","get_sig","get_to","init","into","ne","new","serialize","serialize_for_net","set_from","set_sig","set_to","to_owned","try_from","try_into","type_id","vzip","Accepted","Accepted","AddBlockResult","AddTransactionResult","Exists","Exists","GenerateBlock","Invalid","Mempool","MempoolMessage","ProcessBlocks","Rejected","TryBundleBlock","add_block","add_golden_ticket","add_transaction","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calculate_work_available","calculate_work_needed","can_bundle_block","clone","clone","clone","clone_into","clone_into","clone_into","delete_transactions","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","fmt","from","from","from","from","generate_block","init","init","init","init","into","into","into","into","new","run","set_broadcast_channel_sender","set_mempool_privatekey","set_mempool_publickey","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MerkleTreeLayer","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","get_hash","hash","init","into","ne","new","to_owned","try_from","try_into","type_id","vzip","MineGoldenTicket","Miner","MinerMessage","StartMining","StopMining","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","difficulty","drop","drop","fmt","from","from","init","init","into","into","is_active","mine","mine_on_block_until_golden_ticket_found","new","run","set_broadcast_channel_sender","set_difficulty","set_is_active","set_target","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wallet_lock","run","ATR","MinerInput","MinerOutput","Normal","Other","RouterInput","RouterOutput","SLIP_SIZE","Slip","SlipType","StakerInput","StakerOutput","VipInput","VipOutput","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize_from_net","drop","drop","eq","eq","equivalent","fmt","fmt","from","from","generate_utxoset_key","get_amount","get_hash","get_publickey","get_slip_ordinal","get_slip_type","get_utxoset_key","get_uuid","hash","init","init","into","into","ne","new","on_chain_reorganization","serialize","serialize","serialize_for_net","serialize_input_for_signature","serialize_output_for_signature","set_amount","set_publickey","set_slip_ordinal","set_slip_type","set_uuid","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","validate","vzip","vzip","Storage","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load_blocks_from_disk","new","try_from","try_into","type_id","vzip","write_block_to_disk","memory_stats","mocks","MemoryStats","borrow","borrow_mut","current","deref","deref_mut","drop","fmt","from","init","into","to_string","try_from","try_into","type_id","vzip","make_mock_block","make_mock_tx","TracingAccumulator","TracingTimer","accumulate_time_since_start","borrow","borrow","borrow_mut","borrow_mut","create_timestamp","deref","deref","deref_mut","deref_mut","drop","drop","finish","format_timestamp","from","from","init","init","into","into","new","new","set_start","time_since_last","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ATR","Fee","GoldenTicket","Normal","Other","TRANSACTION_SIZE","Transaction","TransactionType","Vip","add_hop_to_path","add_input","add_output","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cumulative_fees","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize_from_net","drop","drop","eq","eq","fmt","fmt","from","from","generate_metadata","generate_metadata_cumulative_fees","generate_metadata_cumulative_work","generate_metadata_fees_and_slips","generate_metadata_hashes","generate_rebroadcast_transaction","generate_transaction","generate_vip_transaction","get_hash_for_signature","get_inputs","get_message","get_mut_inputs","get_mut_outputs","get_outputs","get_path","get_routing_work_for_publickey","get_signature","get_timestamp","get_total_fees","get_transaction_type","get_winning_routing_node","init","init","inputs","into","into","is_atr_transaction","is_fee_transaction","is_golden_ticket","ne","new","on_chain_reorganization","outputs","routing_work_for_creator","routing_work_for_me","serialize","serialize","serialize_for_net","serialize_for_signature","set_hash_for_signature","set_inputs","set_message","set_outputs","set_path","set_signature","set_timestamp","set_transaction_type","sign","to_owned","to_owned","total_fees","total_in","total_out","try_from","try_from","try_from","try_into","try_into","type_id","type_id","validate","validate_routing_path","vzip","vzip","Wallet","WalletSlip","add_block","add_slip","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_golden_ticket_transaction","delete_slip","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate_slips","get_amount","get_available_balance","get_block_hash","get_block_id","get_lc","get_privatekey","get_publickey","get_slip_ordinal","get_spent","get_utxokey","get_uuid","init","init","into","into","new","new","set_amount","set_block_hash","set_block_id","set_lc","set_slip_ordinal","set_spent","set_utxokey","set_uuid","sign","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["saito_rust","","","","","","","","","","","","","","","","","","","","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::burnfee","","","","","","","","","","","","","","","","saito_rust::consensus","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::consensus::SaitoMessage","","","","","","","saito_rust::cryptosaito_rust::golden_ticket","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::hop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::mempool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::merkle","","","","","","","","","","","","","","","","","","","","","","saito_rust::miner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::network","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::storage","","","","","","","","","","","","","","","","saito_rust::test_utilities","","saito_rust::test_utilities::memory_stats","","","","","","","","","","","","","","","","saito_rust::test_utilities::mocks","","saito_rust::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error returned by most functions.","A specialized <code>Result</code> type for operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize from bytes to a Block. [len of transactions - …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize a Block for transport or disk. [len of …","","","","","","","","","","","","","","","","","","","","","","","","Transactions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new <code>BlockRing</code>","","","","","","","","","","","","","","","","","","","","","","Returns an adjusted burnfee based on the start value …","Returns the amount of work needed to produce a block …","","","","","","","","","","","The types of messages broadcast over the main broadcast …","","","","","","","","","","","","","","","Run the Saito consensus runtime","","","","","","","","","","","","","A Merkle tree is a binary tree, with values of type <code>T</code> at …","A (hashed) message input to an ECDSA signature","","A Secp256k1 public key, used for verification of …","A global, static context to avoid repeatedly creating …","","","","","","","Secret 256-bit key used as <code>x</code> in an ECDSA signature","An ECDSA signature","Adds one secret key to another, modulo the curve order. …","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","The hashing algorithm used by this Merkle tree","","","","","","","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","Gets a reference to the underlying array","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","Adds a second key to this one, returning the sum. Returns …","Adds the keys in the provided slice together, returning …","Returns the number of leaves in the Merkle tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a 32-byte hash directly to a message without …","","","","","","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","Creates a new public key from a secret key.","Converts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key","<strong>If you just want to sign an arbitrary message use …","Creates a public key directly from a slice","","","","Constructs a Merkle Tree from a vector of data blocks. …","Generate an inclusion proof for the <code>n</code>-th leaf value.","Generate an inclusion proof for the given value. Returns …","","","","","","","","Returns the height of Merkle tree","","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns whether the Merkle tree is empty or not","Creates an <code>Iterator</code> over the values contained in this …","Returns the length of the object as an array","Returns the length of the object as an array","Multiplies one secret key by another, modulo the curve …","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","","","Negates one secret key.","Negates the pk to the pk <code>self</code> in place Will return an …","Creates a new random secret key. Requires compilation …","Normalizes a signature to a “low S” form. In ECDSA, …","","","","","Returns the root hash of Merkle tree","","Serialize the key as a byte-encoded pair of values. In …","","","Serializes the signature in compact format","Serializes the signature in DER format","Serialize the key as a byte-encoded pair of values, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Mempool</code> holds unprocessed blocks and transactions and …","","","","","","","","","","","","","","","","Calculates the work available in mempool to produce a …","","Check to see if the <code>Mempool</code> has enough work to bundle a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of a serilized slip in bytes.","","SlipType is a human-readable indicator of the slip-type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper for tracing. Get the amount of time passed. Only …","Accumulate the time passed since this method was called","","","","","","","","","","","","Get the total time accumulated","","","","","","","","Create a new TracingTimer","Create a new TracingAccumulator","","Gets the time passed since this method was called","","","","","","","","","","","","","","","","TransactionType is a human-readable indicator of the type …","","","","","","","","","","","","","","","","","","","","Deserialize from bytes to a Transaction. [len of inputs - …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs when the chain is re-organized","","","","","","Serialize a Transaction for transport or disk. [len of …","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Wallet</code> manages the public and private keypair of the …","The <code>WalletSlip</code> stores the essential information needed to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,1,1,2,1,2,1,2,2,2,1,2,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,2,1,2,1,1,2,1,2,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,2,1,2,1,1,2,1,2,1,2,1,1,2,1,0,0,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,0,0,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,5,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,8,8,9,10,11,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,14,17,15,18,14,17,15,18,14,17,15,18,14,17,15,18,14,17,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,14,17,15,16,15,15,16,14,17,15,18,16,14,17,15,18,16,14,15,18,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,14,14,14,17,15,15,15,18,18,16,14,17,17,15,15,18,18,16,18,18,18,15,14,17,15,14,15,18,16,16,16,0,0,15,16,0,15,16,16,14,14,14,14,14,17,17,17,17,17,14,17,15,18,16,14,17,15,18,16,16,14,17,16,16,14,17,14,15,15,18,14,15,14,18,14,17,15,16,16,14,15,15,18,18,18,15,0,14,17,15,18,16,14,15,18,14,17,15,18,16,14,17,15,18,16,14,17,15,18,16,0,14,17,15,18,16,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,22,0,0,21,22,23,22,0,0,23,22,23,24,24,24,24,23,21,22,24,23,21,22,24,24,24,23,21,22,23,21,22,24,24,23,21,22,24,23,21,22,24,23,21,22,21,22,23,24,23,21,22,24,24,23,21,22,24,23,21,22,24,0,24,24,24,23,21,22,24,23,21,22,24,23,21,22,24,23,21,22,24,23,21,22,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,0,0,26,26,27,26,27,26,26,26,27,26,27,26,27,27,26,26,27,26,27,26,27,26,27,27,27,27,0,27,27,27,27,27,26,27,26,27,26,27,26,27,26,27,0,28,28,28,28,28,28,28,0,0,0,28,28,28,28,28,29,28,29,28,29,28,29,28,29,28,29,28,29,29,28,29,28,29,28,28,29,28,29,29,29,28,29,29,29,29,29,28,28,29,28,29,29,29,29,28,29,29,29,29,29,29,29,29,29,28,29,28,28,29,28,29,28,29,29,28,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,32,33,32,33,32,0,33,32,33,32,33,32,32,0,33,32,33,32,33,32,33,32,32,33,33,32,33,32,33,32,33,32,34,34,34,34,34,0,0,0,34,35,35,35,34,35,34,35,34,35,34,35,35,34,35,34,35,34,35,35,34,35,34,35,34,35,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,34,35,35,34,35,35,35,35,35,35,35,35,35,35,34,35,35,35,35,35,35,35,35,35,35,35,35,34,35,35,35,35,34,34,35,34,35,34,35,35,35,34,35,0,0,36,36,36,37,36,37,36,37,36,37,36,36,36,37,36,37,36,37,36,37,36,37,36,37,36,37,37,37,36,36,37,37,37,37,36,37,36,37,36,37,37,37,37,37,37,37,37,37,36,36,37,36,37,36,37,36,37,36,37],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["transaction",3]]],[[]],[[]],[[]],[[]],[[],["datatovalidate",3]],[[],["block",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["u8",15],["vec",3]],["block",3]],[[["usize",15]]],[[["usize",15]]],[[["datatovalidate",3]],["bool",15]],[[["block",3]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["u8",15],["vec",3]]],[[]],null,null,[[["arc",3],["vec",3],["rwlock",3],["arc",3],["saitohash",6],["rwlock",3]]],[[["blockchain",3]],["datatovalidate",3]],[[],["saitohash",6]],[[],["saitohash",6]],[[],["bool",15]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u64",15]],[[],["bool",15]],[[],["bool",15]],[[],["saitohash",6]],[[],["u64",15]],[[],["bool",15]],[[],["saitohash",6]],[[],["saitohash",6]],[[],["saitosignature",6]],[[],["u64",15]],[[],["vec",3]],[[],["u64",15]],null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],[["u8",15],["vec",3]]],[[["datatovalidate",3]],["bool",15]],[[["block",3]],["bool",15]],[[],["datatovalidate",3]],[[],["block",3]],[[["bool",15],["ahashmap",3]],["bool",15]],null,null,null,[[],["result",4]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u64",15]]],[[["bool",15]]],[[["bool",15]]],[[["saitohash",6]]],[[["u64",15]]],[[["bool",15]]],[[["saitohash",6]]],[[["saitohash",6]]],[[["saitosignature",6]]],[[["u64",15]]],[[["vec",3]]],[[["u64",15]]],[[["saitopublickey",6],["saitoprivatekey",6]]],[[]],[[]],null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["blockchain",3],["ahashmap",3]],["bool",15]],[[]],[[]],null,null,[[["block",3]]],[[]],[[["saitohash",6]]],[[["u32",15]],["u64",15]],[[["u64",15]]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],[["block",3],["option",4]]],[[],["saitohash",6]],[[],["u64",15]],[[],["usize",15]],[[]],[[["vec",3]],["bool",15]],[[["arc",3],["rwlock",3]]],[[["arc",3],["rwlock",3],["sender",3],["receiver",3],["saitomessage",4]]],[[["sender",3],["saitomessage",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["vec",3],["bool",15]],["bool",15]],null,[[["vec",3]],["bool",15]],[[]],null,[[["usize",15],["vec",3],["bool",15]],["bool",15]],null,null,null,null,[[["saitohash",6],["u64",15]]],[[["block",3]]],[[]],[[]],[[]],[[]],[[["saitohash",6]],["bool",15]],[[["saitohash",6],["u64",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["saitohash",6]],[[["u64",15]],["saitohash",6]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["saitohash",6],["bool",15]],["bool",15]],[[["saitohash",6],["bool",15],["u64",15]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["saitomessage",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["secretkey",3]],[[],["message",3]],[[],["publickey",3]],[[],["signature",3]],[[],["merkletree",3]],[[]],[[]],[[]],[[]],[[]],[[["secretkey",3]],["ordering",4]],[[["message",3]],["ordering",4]],[[["publickey",3]],["ordering",4]],[[["merkletree",3]],["ordering",4]],[[["publickey",3]],[["result",4],["error",4],["publickey",3]]],[[],[["result",4],["error",4],["publickey",3]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["result",4],["secretkey",3]]],[[],[["result",4],["publickey",3]]],[[],[["signature",3],["result",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["secretkey",3]],["bool",15]],[[["message",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["merkletree",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[],["message",3]],[[["publickey",3]],["publickey",3]],[[]],[[]],[[["signature",3]],["signature",3]],[[]],[[],[["result",4],["signature",3],["error",4]]],[[],[["result",4],["signature",3],["error",4]]],[[],[["result",4],["signature",3],["error",4]]],[[["secp256k1",3],["secretkey",3]],["publickey",3]],[[],[["error",4],["secretkey",3],["result",4]]],[[],[["result",4],["message",3],["error",4]]],[[],[["result",4],["error",4],["publickey",3]]],[[["str",15]],[["error",4],["secretkey",3],["result",4]]],[[["str",15]],[["result",4],["error",4],["publickey",3]]],[[["str",15]],[["result",4],["signature",3],["error",4]]],[[["vec",3],["algorithm",3],["global",3]],["merkletree",3]],[[["usize",15]],[["proof",3],["option",4]]],[[],[["proof",3],["option",4]]],[[]],[[["u64",15]],[["u8",15],["vec",3]]],[[],["u64",15]],[[],["u64",15]],[[["vec",3]],["saitohash",6]],[[]],[[]],[[],["usize",15]],[[["usize",15],["rangeto",3]]],[[["rangefull",3]]],[[["usize",15],["range",3]]],[[["usize",15],["rangefrom",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["rangeto",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["rangefrom",3]]],[[["usize",15],["range",3]]],[[["rangefull",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["leavesiterator",3]],[[],["usize",15]],[[],["usize",15]],[[],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[]],[[["secp256k1",3]]],[[],["secretkey",3]],[[]],[[["secretkey",3]],[["option",4],["ordering",4]]],[[["message",3]],[["option",4],["ordering",4]]],[[["publickey",3]],[["option",4],["ordering",4]]],[[["merkletree",3]],[["option",4],["ordering",4]]],[[],["vec",3]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[],["serializedsignature",3]],[[]],[[["saitoprivatekey",6]],["saitosignature",6]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["saitosignature",6],["saitopublickey",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["goldenticket",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["u8",15],["vec",3]],["goldenticket",3]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["saitohash",6],["saitopublickey",6]],["saitohash",6]],[[],["saitopublickey",6]],[[],["saitohash",6]],[[],["saitohash",6]],[[],["u8",15]],[[],["usize",15]],[[]],[[["saitohash",6],["u64",15]],["bool",15]],[[["saitohash",6],["saitopublickey",6],["u8",15]]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[],["hop",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["u8",15],["vec",3]],["hop",3]],[[["usize",15]]],[[["hop",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["arc",3],["rwlock",3],["saitohash",6],["saitopublickey",6]]],[[],["saitopublickey",6]],[[],["saitosignature",6]],[[],["saitopublickey",6]],[[],["usize",15]],[[]],[[["hop",3]],["bool",15]],[[]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[["saitopublickey",6]]],[[["saitosignature",6]]],[[["saitopublickey",6]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["block",3]],["addblockresult",4]],[[["goldenticket",3]]],[[["transaction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["block",3]],["u64",15]],[[["arc",3],["rwlock",3]]],[[],["mempoolmessage",4]],[[],["addblockresult",4]],[[],["addtransactionresult",4]],[[]],[[]],[[]],[[["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["addblockresult",4]],["bool",15]],[[["addtransactionresult",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["arc",3],["rwlock",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["arc",3],["rwlock",3]]],[[["arc",3],["rwlock",3],["sender",3],["arc",3],["receiver",3],["saitomessage",4],["rwlock",3]]],[[["sender",3],["saitomessage",4]]],[[["saitoprivatekey",6]]],[[["saitopublickey",6]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["merkletreelayer",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["merkletreelayer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["saitohash",6]],[[],["bool",15]],[[],["usize",15]],[[]],[[["merkletreelayer",3]],["bool",15]],[[["saitohash",6],["u8",15]],["merkletreelayer",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["minermessage",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[]],[[["block",3]]],[[["arc",3],["rwlock",3]],["miner",3]],[[["sender",3],["receiver",3],["arc",3],["saitomessage",4],["rwlock",3]]],[[["sender",3],["saitomessage",4]]],[[["u64",15]]],[[["bool",15]]],[[["saitohash",6]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[["sender",3],["saitomessage",4],["receiver",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["sliptype",4]],[[],["slip",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]],["slip",3]],[[["usize",15]]],[[["usize",15]]],[[["sliptype",4]],["bool",15]],[[["slip",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u8",15]],[[],["sliptype",4]],[[],["saitoutxosetkey",6]],[[],["saitohash",6]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["slip",3]],["bool",15]],[[]],[[["bool",15],["u64",15],["ahashmap",3]]],[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u8",15]]],[[["sliptype",4]]],[[["saitohash",6]]],[[]],[[]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["utxoset",6]],["bool",15]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["arc",3],["rwlock",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["block",3]]],null,null,null,[[]],[[]],[[],["memorystats",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["saitohash",6],["u64",15]],["block",3]],[[["arc",3],["rwlock",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[["u64",15]],[["delayedformat",3],["strftimeitems",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["tracingtimer",3]],[[],["tracingaccumulator",3]],[[]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["arc",3],["saitopublickey",6],["rwlock",3]]],[[["slip",3]]],[[["slip",3]]],[[]],[[]],[[]],[[]],[[],["transactiontype",4]],[[],["transaction",3]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]],["transaction",3]],[[["usize",15]]],[[["usize",15]]],[[["transactiontype",4]],["bool",15]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["saitopublickey",6]],["bool",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["saitopublickey",6]],["bool",15]],[[],["bool",15]],[[["slip",3],["u64",15],["transaction",3]],["transaction",3]],[[["arc",3],["rwlock",3],["saitopublickey",6],["u64",15]]],[[["arc",3],["rwlock",3],["saitopublickey",6],["u64",15]]],[[],[["saitohash",6],["option",4]]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[["saitopublickey",6]],["u64",15]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["transactiontype",4]],[[["saitohash",6]],["saitopublickey",6]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["transaction",3]],["bool",15]],[[]],[[["bool",15],["u64",15],["ahashmap",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["saitohash",6]]],[[["vec",3],["slip",3]]],[[["u8",15],["vec",3]]],[[["vec",3],["slip",3]]],[[["hop",3],["vec",3]]],[[["saitosignature",6]]],[[["u64",15]]],[[["transactiontype",4]]],[[["saitoprivatekey",6]]],[[]],[[]],null,null,null,[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["utxoset",6]],["bool",15]],[[],["bool",15]],[[]],[[]],null,null,[[["block",3]]],[[["bool",15],["slip",3],["block",3],["transaction",3]]],[[]],[[]],[[]],[[]],[[],["wallet",3]],[[],["walletslip",3]],[[]],[[]],[[["goldenticket",3]]],[[["slip",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[],["saitohash",6]],[[],["u64",15]],[[],["bool",15]],[[],["saitoprivatekey",6]],[[],["saitopublickey",6]],[[],["u8",15]],[[],["bool",15]],[[],["saitoutxosetkey",6]],[[],["saitohash",6]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["u64",15]]],[[["saitohash",6]]],[[["u64",15]]],[[["bool",15]]],[[["u8",15]]],[[["bool",15]]],[[["saitoutxosetkey",6]]],[[["saitohash",6]]],[[],["saitosignature",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Block"],[3,"DataToValidate"],[3,"Blockchain"],[3,"RingItem"],[3,"BlockRing"],[3,"BurnFee"],[4,"SaitoMessage"],[13,"BlockchainNewLongestChainBlock"],[13,"BlockchainAddBlockSuccess"],[13,"BlockchainAddBlockFailure"],[13,"MempoolNewBlock"],[13,"MinerNewGoldenTicket"],[13,"MempoolNewTransaction"],[3,"SecretKey"],[3,"PublicKey"],[3,"MerkleTree"],[3,"Message"],[3,"Signature"],[3,"GoldenTicket"],[3,"Hop"],[4,"AddBlockResult"],[4,"AddTransactionResult"],[4,"MempoolMessage"],[3,"Mempool"],[3,"MerkleTreeLayer"],[4,"MinerMessage"],[3,"Miner"],[4,"SlipType"],[3,"Slip"],[3,"Storage"],[3,"MemoryStats"],[3,"TracingAccumulator"],[3,"TracingTimer"],[4,"TransactionType"],[3,"Transaction"],[3,"Wallet"],[3,"WalletSlip"]]},\
"saito_spammer":{"doc":"","t":[5,5],"n":["main","run"],"q":["saito_spammer",""],"d":["",""],"i":[0,0],"f":[[[],["result",6]],[[["rwlock",3],["arc",3],["arc",3],["arc",3],["rwlock",3],["rwlock",3]]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};