var searchIndex = JSON.parse('{\
"saito_rust":{"doc":"Welcome to Saito","tn":["Error","Result","block","blockchain","blockring","consensus","crypto","mempool","merkle","network","slip","storage","test_utilities","time","transaction","wallet","Block","BlockCore","add_transaction","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize_for_net","drop","drop","eq","eq","fmt","fmt","from","from","from","generate_hash","generate_merkle_root","get_burnfee","get_creator","get_difficulty","get_hash","get_id","get_lc","get_merkle_root","get_previous_block_hash","get_signature","get_timestamp","get_transactions","get_treasury","init","init","into","into","into","ne","ne","new","new","on_chain_reorganization","serialize","serialize","serialize_for_net","set_burnfee","set_creator","set_difficulty","set_hash","set_id","set_lc","set_merkle_root","set_previous_block_hash","set_signature","set_timestamp","set_transactions","set_treasury","to_owned","to_owned","transactions","try_from","try_from","try_into","try_into","type_id","type_id","validate","validate_pre_calculations","vzip","vzip","Blockchain","add_block","add_block_failure","add_block_success","blockring","blocks","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","get_latest_block","get_latest_block_hash","get_latest_block_id","init","into","is_new_chain_the_longest_chain","new","try_from","try_into","type_id","unwind_chain","utxoset","validate","vzip","wind_chain","BlockRing","RingItem","add_block","add_block","borrow","borrow","borrow_mut","borrow_mut","contains_block_hash","contains_block_hash_at_block_id","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get_longest_chain_block_hash","get_longest_chain_block_hash_by_block_id","get_longest_chain_block_id","init","init","into","into","new","new","on_chain_reorganization","on_chain_reorganization","print_lc","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","MempoolNewBlock","MempoolNewTransaction","SaitoMessage","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","init","into","run","to_owned","try_from","try_into","type_id","vzip","hash","transaction","MerkleTree","Message","PARALLEL_HASH_BYTE_THRESHOLD","PublicKey","SECP256K1","SHA256","SaitoHash","SaitoPrivateKey","SaitoPublicKey","SaitoSignature","SaitoUTXOSetKey","SecretKey","Signature","add_assign","add_exp_assign","algorithm","as_c_ptr","as_c_ptr","as_c_ptr","as_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_c_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","combine","combine_keys","count","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_compact","from_der","from_der_lax","from_secret_key","from_slice","from_slice","from_slice","from_str","from_str","from_str","from_vec","gen_nth_proof","gen_proof","generate_keys","get_hash","get_hash","hash","hash","hash","height","index","index","index","index","index","index","index","index","index","index","init","init","init","init","init","into","into","into","into","into","into_iter","is_empty","is_empty","is_empty","iter","len","len","mul_assign","mul_assign","ne","ne","negate_assign","negate_assign","new","normalize_s","partial_cmp","partial_cmp","partial_cmp","partial_cmp","root_hash","serialize","serialize","serialize","serialize","serialize_compact","serialize_der","serialize_uncompressed","sign","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","Accepted","AddBlockResult","Exists","GenerateBlock","Mempool","MempoolMessage","ProcessBlocks","add_block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","from","from","from","generate_block","init","init","init","into","into","into","new","run","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","MerkleTreeLayer","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","get_hash","hash","init","into","ne","new","to_owned","try_from","try_into","type_id","vzip","run","Normal","Other","SLIP_SIZE","Slip","SlipCore","SlipType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_from_net","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_amount","get_hash","get_publickey","get_slip_ordinal","get_slip_type","get_utxoset_key","get_uuid","hash","init","init","init","into","into","into","ne","ne","new","new","on_chain_reorganization","serialize","serialize","serialize","serialize_for_net","serialize_for_signature","set_amount","set_publickey","set_slip_ordinal","set_slip_type","set_uuid","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","vzip","vzip","vzip","Storage","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","load_blocks_from_disk","new","try_from","try_into","type_id","vzip","write_block_to_disk","memory_stats","mocks","MemoryStats","borrow","borrow_mut","current","deref","deref_mut","drop","fmt","from","init","into","to_string","try_from","try_into","type_id","vzip","MockTimestampGenerator","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","make_mock_block","make_mock_invalid_block","new","next","try_from","try_into","type_id","vzip","TracingAccumulator","TracingTimer","accumulate_time_since_start","borrow","borrow","borrow_mut","borrow_mut","create_timestamp","deref","deref","deref_mut","deref_mut","drop","drop","finish","format_timestamp","from","from","init","init","into","into","new","new","set_start","time_since_last","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Normal","Other","TRANSACTION_SIZE","Transaction","TransactionCore","TransactionType","add_input","add_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize_from_net","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","get_hash_for_signature","get_inputs","get_message","get_outputs","get_signature","get_timestamp","get_transaction_type","init","init","init","into","into","into","ne","ne","new","new","on_chain_reorganization","serialize","serialize","serialize","serialize_for_net","serialize_for_signature","set_hash_for_signature","set_message","set_signature","set_timestamp","set_transaction_type","sign","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","validate_pre_calculations","vzip","vzip","vzip","Wallet","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","get_privatekey","get_publickey","init","into","new","sign","to_owned","try_from","try_into","type_id","vzip"],"q":["saito_rust","","","","","","","","","","","","","","","","saito_rust::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockchain","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::blockring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::consensus","","","","","","","","","","","","","","","","","","","","saito_rust::consensus::SaitoMessage","","saito_rust::cryptosaito_rust::mempool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::merkle","","","","","","","","","","","","","","","","","","","","","","saito_rust::network","saito_rust::slip","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::storage","","","","","","","","","","","","","","","","saito_rust::test_utilities","","saito_rust::test_utilities::memory_stats","","","","","","","","","","","","","","","","saito_rust::test_utilities::mocks","","","","","","","","","","","","","","","","","saito_rust::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::transaction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","saito_rust::wallet","","","","","","","","","","","","","","","","","","","",""],"d":["Error returned by most functions.","A specialized <code>Result</code> type for operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize from bytes to a Block. [len of transactions - …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize a Block for transport or disk. [len of …","","","","","","","","","","","","","","","Transactions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new <code>BlockRing</code>","","","","","","","","","","","","","","The types of messages broadcast over the main broadcast …","","","","","","","","","","","","Run the Saito consensus runtime","","","","","","","","A Merkle tree is a binary tree, with values of type <code>T</code> at …","A (hashed) message input to an ECDSA signature","","A Secp256k1 public key, used for verification of …","A global, static context to avoid repeatedly creating …","","","","","","","Secret 256-bit key used as <code>x</code> in an ECDSA signature","An ECDSA signature","Adds one secret key to another, modulo the curve order. …","Adds the pk corresponding to <code>other</code> to the pk <code>self</code> in place…","The hashing algorithm used by this Merkle tree","","","","","","","","","Converts the object to a mutable raw pointer for FFI …","Converts the object to a mutable raw pointer for FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Obtains a raw mutable pointer suitable for use with FFI …","Converts the object to a raw pointer for FFI interfacing","Converts the object to a raw pointer for FFI interfacing","Obtains a raw const pointer suitable for use with FFI …","Obtains a raw pointer suitable for use with FFI functions","Gets a reference to the underlying array","Gets a reference to the underlying array","","","","","","","","","","","","","","","","","","","","","","","","","Adds a second key to this one, returning the sum. Returns …","Adds the keys in the provided slice together, returning …","Returns the number of leaves in the Merkle tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a 32-byte hash directly to a message without …","","","","","","","Converts a 64-byte compact-encoded byte slice to a …","Converts a DER-encoded byte slice to a signature","Converts a “lax DER”-encoded byte slice to a …","Creates a new public key from a secret key.","Converts a <code>SECRET_KEY_SIZE</code>-byte slice to a secret key","<strong>If you just want to sign an arbitrary message use …","Creates a public key directly from a slice","","","","Constructs a Merkle Tree from a vector of data blocks. …","Generate an inclusion proof for the <code>n</code>-th leaf value.","Generate an inclusion proof for the given value. Returns …","","","","","","","Returns the height of Merkle tree","","","","","","","","","","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves …","Returns whether the object as an array is empty","Returns whether the object as an array is empty","Returns whether the Merkle tree is empty or not","Creates an <code>Iterator</code> over the values contained in this …","Returns the length of the object as an array","Returns the length of the object as an array","Multiplies one secret key by another, modulo the curve …","Muliplies the pk <code>self</code> in place by the scalar <code>other</code> Will …","","","Negates one secret key.","Negates the pk to the pk <code>self</code> in place Will return an …","Creates a new random secret key. Requires compilation …","Normalizes a signature to a “low S” form. In ECDSA, …","","","","","Returns the root hash of Merkle tree","","Serialize the key as a byte-encoded pair of values. In …","","","Serializes the signature in compact format","Serializes the signature in DER format","Serialize the key as a byte-encoded pair of values, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Mempool</code> holds unprocessed blocks and transactions and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of a serilized slip in bytes.","","SlipCore is a self-contained object containing only the …","SlipType is a human-readable indicator of the slip-type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper for tracing. Get the amount of time passed. Only …","Accumulate the time passed since this method was called","","","","","","","","","","","","Get the total time accumulated","","","","","","","","Create a new TracingTimer","Create a new TracingAccumulator","","Gets the time passed since this method was called","","","","","","","","","","","","","TransactionCore is a self-contained object containing …","TransactionType is a human-readable indicator of the type …","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize from bytes to a Transaction. [len of inputs - …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize a Transaction for transport or disk.","","","","Serialize a Transaction for transport or disk. [len of …","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Wallet</code> manages the public and private keypair of the …","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,2,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,2,1,2,1,1,1,2,1,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,5,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,6,6,0,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,9,12,10,13,9,12,10,13,9,12,10,13,9,12,10,13,9,12,9,12,10,13,11,9,12,10,13,11,9,12,10,13,11,9,12,10,13,11,9,12,10,11,10,10,11,9,12,10,13,11,9,12,10,13,11,9,10,13,9,12,10,13,11,9,12,10,13,11,9,9,9,12,10,10,10,13,13,11,9,12,12,10,10,13,13,11,13,13,13,10,9,12,10,9,10,13,11,11,11,0,10,11,0,10,11,11,9,9,9,9,9,12,12,12,12,12,9,12,10,13,11,9,12,10,13,11,11,9,12,11,11,9,12,9,10,10,13,9,10,9,13,9,12,10,11,11,9,10,10,13,13,13,10,0,9,12,10,13,11,9,10,13,9,12,10,13,11,9,12,10,13,11,9,12,10,13,11,0,9,12,10,13,11,14,0,14,15,0,0,15,16,16,15,14,16,15,14,15,14,15,14,16,15,14,16,15,14,16,15,14,14,15,16,15,14,16,16,15,14,16,15,14,16,0,15,14,16,15,14,16,15,14,16,15,14,16,15,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,0,0,0,0,18,19,20,18,19,20,18,19,20,18,19,20,19,20,18,19,20,18,19,20,18,19,20,20,18,19,20,18,19,20,18,19,20,18,19,20,20,18,20,20,20,20,20,18,18,19,20,18,19,20,19,20,19,20,20,18,19,20,20,20,20,20,20,20,20,18,19,20,18,18,19,20,18,19,20,18,19,20,20,18,19,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,0,0,23,23,23,23,23,23,0,0,24,25,24,25,24,0,25,24,25,24,25,24,24,0,25,24,25,24,25,24,25,24,24,25,25,24,25,24,25,24,25,24,26,26,0,0,0,0,27,27,26,28,27,26,28,27,26,28,27,26,28,27,28,27,26,28,27,26,28,27,26,28,27,27,26,28,27,26,28,27,26,28,27,26,28,27,27,27,27,27,27,27,27,26,28,27,26,28,27,28,27,28,27,27,26,28,27,27,27,27,27,27,27,27,27,26,28,27,26,26,28,27,26,28,27,26,28,27,27,27,26,28,27,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["transaction",3]]],[[]],[[]],[[]],[[]],[[],["blockcore",3]],[[],["block",3]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]],["block",3]],[[["usize",15]]],[[["usize",15]]],[[["blockcore",3]],["bool",15]],[[["block",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["u8",15],["vec",3]]],[[],["saitohash",6]],[[],["saitohash",6]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u64",15]],[[],["saitohash",6]],[[],["u64",15]],[[],["bool",15]],[[],["saitohash",6]],[[],["saitohash",6]],[[],["saitosignature",6]],[[],["u64",15]],[[],["vec",3]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[],[["u8",15],["vec",3]]],[[]],[[["blockcore",3]],["bool",15]],[[["block",3]],["bool",15]],[[["u64",15]]],[[["blockcore",3]],["block",3]],[[["bool",15],["ahashmap",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u64",15]]],[[["saitohash",6]]],[[["u64",15]]],[[["bool",15]]],[[["saitohash",6]]],[[["saitohash",6]]],[[]],[[["u64",15]]],[[["vec",3]]],[[["u64",15]]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["blockchain",3]],["bool",15]],[[]],[[]],[[]],null,[[["block",3]]],[[]],[[["saitohash",6]]],null,null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],[["option",4],["block",3]]],[[],["saitohash",6]],[[],["u64",15]],[[],["usize",15]],[[]],[[["vec",3]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["usize",15],["vec",3],["bool",15]],["bool",15]],null,[[["vec",3]],["bool",15]],[[]],[[["usize",15],["vec",3],["bool",15]],["bool",15]],null,null,[[["u64",15],["saitohash",6]]],[[["block",3]]],[[]],[[]],[[]],[[]],[[["saitohash",6]],["bool",15]],[[["u64",15],["saitohash",6]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["saitohash",6]],[[["u64",15]],["saitohash",6]],[[],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[["bool",15],["saitohash",6]],["bool",15]],[[["bool",15],["u64",15],["saitohash",6]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[]],[[]],[[],["saitomessage",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["secretkey",3]],[[],["message",3]],[[],["publickey",3]],[[],["signature",3]],[[],["merkletree",3]],[[]],[[]],[[]],[[]],[[]],[[["secretkey",3]],["ordering",4]],[[["message",3]],["ordering",4]],[[["publickey",3]],["ordering",4]],[[["merkletree",3]],["ordering",4]],[[["publickey",3]],[["result",4],["publickey",3],["error",4]]],[[],[["result",4],["publickey",3],["error",4]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["secretkey",3],["result",4]]],[[],[["publickey",3],["result",4]]],[[],[["result",4],["signature",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["secretkey",3]],["bool",15]],[[["message",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["merkletree",3]],["bool",15]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[],["message",3]],[[]],[[]],[[["publickey",3]],["publickey",3]],[[]],[[["signature",3]],["signature",3]],[[]],[[],[["signature",3],["result",4],["error",4]]],[[],[["signature",3],["result",4],["error",4]]],[[],[["signature",3],["result",4],["error",4]]],[[["secretkey",3],["secp256k1",3]],["publickey",3]],[[],[["result",4],["error",4],["secretkey",3]]],[[],[["result",4],["message",3],["error",4]]],[[],[["result",4],["publickey",3],["error",4]]],[[["str",15]],[["result",4],["error",4],["secretkey",3]]],[[["str",15]],[["result",4],["publickey",3],["error",4]]],[[["str",15]],[["signature",3],["result",4],["error",4]]],[[["algorithm",3],["vec",3],["global",3]],["merkletree",3]],[[["usize",15]],[["proof",3],["option",4]]],[[],[["proof",3],["option",4]]],[[]],[[],["u64",15]],[[],["u64",15]],[[["vec",3]],["saitohash",6]],[[]],[[]],[[],["usize",15]],[[["rangefull",3]]],[[["usize",15]],["u8",15]],[[["usize",15],["rangeto",3]]],[[["usize",15],["rangefrom",3]]],[[["usize",15],["range",3]]],[[["usize",15]],["u8",15]],[[["rangefull",3]]],[[["usize",15],["rangefrom",3]]],[[["usize",15],["range",3]]],[[["usize",15],["rangeto",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["leavesiterator",3]],[[],["usize",15]],[[],["usize",15]],[[],[["result",4],["error",4]]],[[["secp256k1",3]],[["result",4],["error",4]]],[[["publickey",3]],["bool",15]],[[["signature",3]],["bool",15]],[[]],[[["secp256k1",3]]],[[],["secretkey",3]],[[]],[[["secretkey",3]],[["option",4],["ordering",4]]],[[["message",3]],[["option",4],["ordering",4]]],[[["publickey",3]],[["option",4],["ordering",4]]],[[["merkletree",3]],[["option",4],["ordering",4]]],[[],["vec",3]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[]],[[],["serializedsignature",3]],[[]],[[["saitoprivatekey",6]],["saitosignature",6]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["saitopublickey",6],["saitosignature",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["block",3]],["addblockresult",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mempoolmessage",4]],[[],["addblockresult",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["addblockresult",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rwlock",3],["arc",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["arc",3],["rwlock",3]]],[[["arc",3],["sender",3],["rwlock",3],["saitomessage",4],["receiver",3],["arc",3],["rwlock",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,[[]],[[]],[[],["merkletreelayer",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["merkletreelayer",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["saitohash",6]],[[],["bool",15]],[[],["usize",15]],[[]],[[["merkletreelayer",3]],["bool",15]],[[["u8",15],["saitohash",6]],["merkletreelayer",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["sender",3],["saitomessage",4],["receiver",3]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["sliptype",4]],[[],["slipcore",3]],[[],["slip",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]],["slip",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["sliptype",4]],["bool",15]],[[["slipcore",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["saitopublickey",6]],[[],["u8",15]],[[],["sliptype",4]],[[],["saitoutxosetkey",6]],[[],["saitosignature",6]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["slipcore",3]],["bool",15]],[[["slip",3]],["bool",15]],[[["sliptype",4],["u64",15],["u8",15]]],[[["slipcore",3]]],[[["bool",15],["ahashmap",3],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["u64",15]]],[[["saitopublickey",6]]],[[["u8",15]]],[[["sliptype",4]]],[[["saitosignature",6]]],[[]],[[]],[[]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["rwlock",3],["arc",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["block",3]]],null,null,null,[[]],[[]],[[],["memorystats",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["usize",15]],[[]],[[["u64",15],["saitohash",6]],["block",3]],[[["u64",15],["saitohash",6]],["block",3]],[[],["mocktimestampgenerator",3]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["u64",15]],[[["u64",15]],[["strftimeitems",3],["delayedformat",3]]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["tracingtimer",3]],[[],["tracingaccumulator",3]],[[]],[[],["u64",15]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,[[["slip",3]]],[[["slip",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["transactiontype",4]],[[],["transactioncore",3]],[[],["transaction",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15],["vec",3]],["transaction",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["transactiontype",4]],["bool",15]],[[["transactioncore",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["saitohash",6]],[[],["vec",3]],[[],["vec",3]],[[],["vec",3]],[[]],[[],["u64",15]],[[],["transactiontype",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["transactioncore",3]],["bool",15]],[[["transaction",3]],["bool",15]],[[["vec",3],["slip",3],["vec",3],["transactiontype",4],["saitosignature",6],["u64",15],["u8",15]]],[[["transactioncore",3]]],[[["bool",15],["ahashmap",3],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["u8",15],["vec",3]]],[[],[["u8",15],["vec",3]]],[[["saitohash",6]]],[[["u8",15],["vec",3]]],[[["saitosignature",6]]],[[["u64",15]]],[[["transactiontype",4]]],[[["saitoprivatekey",6]]],[[]],[[]],[[]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,[[]],[[]],[[],["wallet",3]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["saitoprivatekey",6]],[[],["saitopublickey",6]],[[],["usize",15]],[[]],[[]],[[],["saitosignature",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"Block"],[3,"BlockCore"],[3,"Blockchain"],[3,"RingItem"],[3,"BlockRing"],[4,"SaitoMessage"],[13,"MempoolNewBlock"],[13,"MempoolNewTransaction"],[3,"SecretKey"],[3,"PublicKey"],[3,"MerkleTree"],[3,"Message"],[3,"Signature"],[4,"AddBlockResult"],[4,"MempoolMessage"],[3,"Mempool"],[3,"MerkleTreeLayer"],[4,"SlipType"],[3,"SlipCore"],[3,"Slip"],[3,"Storage"],[3,"MemoryStats"],[3,"MockTimestampGenerator"],[3,"TracingAccumulator"],[3,"TracingTimer"],[4,"TransactionType"],[3,"Transaction"],[3,"TransactionCore"],[3,"Wallet"]]},\
"spammer":{"doc":"","t":[5],"n":["main"],"q":["spammer"],"d":[""],"i":[0],"f":[[[],["result",6]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};